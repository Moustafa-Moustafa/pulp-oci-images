---
name: Build App Images
description: Build one of the App images (pulp, pulp-minimal)
inputs:
  image_variant:
    description: 'Whether the image is a stable or nightly build'
    default: 'stable'
    required: false
  image_name:
    description: 'Name of the image to be built'
    required: true
  image_cache_key:
    description: 'The key value used to store the base images in the cache'
    required: true
  latest_ui:
    description: 'Use the latest pulp-ui when building the image'
    default: 'false'
    required: false
  built_base_images:
    description: 'A JSON list of the base-images that were freshly rebuilt prior'
    required: true
outputs:
  app_version:
    value: ${{ steps.image_version_branch.outputs.app_version }}
    description: 'The full version of the app in the built image'
  app_branch:
    value: ${{ steps.image_version_branch.outputs.app_branch }}
    description: 'The pulpcore version branch that the built image matches'
  rebuilt_images:
    value: ${{ env.BUILD }}
    description: 'true/false if the app image was rebuilt'

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install python deps
      run: pip install httpie jq
      shell: bash

    - name: Restore podman images from cache
      uses: actions/cache/restore@v4
      with:
        key: base-images=${{ inputs.image_cache_key }}
        path: base-images.tar.gz

    - name: Load podman images from tarball
      run: |
        podman load -i base-images.tar.gz
      shell: bash

    - name: Find latest ui version
      if: inputs.latest_ui != 'false'
      run: |
        echo "Requesting the latest pulp-ui release"
        URL=$(http --verify=no GET https://api.github.com/repos/pulp/pulp-ui/releases/latest | jq -r '.assets[0].browser_download_url')
        if [[ -n "${URL}" && ("${URL}" != "null") ]]; then
          echo "Found UI url ${URL}"
          echo "BUILD_UI_ARG=--build-arg PULP_UI_URL=${URL}" >> $GITHUB_ENV
        else
          echo "Failed to find the latest pulp-ui release"
        fi
      shell: bash

    - name: Set hash key
      run: echo "VERSIONKEY=versions-${{ github.ref_name }}=${{ hashFiles(format('images/{0}/stable/**', inputs.image_name)) }}" >> $GITHUB_ENV
      shell: bash

    - name: Restore last builds versions from cache
      id: cache
      uses: actions/cache/restore@v4
      with:
        key: ${{ env.VERSIONKEY }}
        path: versions.freeze

    - name: Check if rebuild is needed
      run: |
        # Rebuilds are needed for 
        # 1. CI is being ran in a PR or is a nightly run
        # 2. Base images were rebuilt
        # 3. New pulp versions was released
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ inputs.image_variant }}" == "nightly" || -n "${{ inputs.built_base_images }}" ]]; then
          echo "BUILD=true" >> $GITHUB_ENV
        else
          if [[ "${{ steps.cache.outputs.cache-hit  }}" == "false" ]]; then
            echo "BUILD=true" >> $GITHUB_ENV
          else
            # Script returns non-zero (100) when new versions are available
            if python .ci/scripts/check_up_to_date.py ${{ github.ref_name }} versions.freeze; then
              echo "BUILD=false" >> $GITHUB_ENV
            else
              echo "BUILD=true" >> $GITHUB_ENV
            fi
          fi
        fi
        echo "Going to rebuild: ${BUILD}"
      shell: bash

    - name: Build images
      if: env.BUILD == 'true'
      run: |
        podman version
        buildah version
        sudo podman run --rm --privileged multiarch/qemu-user-static --reset -p yes
        for ARCH in arm64 amd64
        do
          if [[ "${{ inputs.image_name }}" == "pulp-minimal" ]]; then
            base_image=$(echo ${{ inputs.image_name }} | cut -d '-' -f1)
            podman build --platform linux/${ARCH} --format docker --pull=false --file images/${{ inputs.image_name }}/${{ inputs.image_variant }}/Containerfile.core --tag pulp/${{ inputs.image_name }}:ci-${ARCH} --build-arg FROM_TAG=ci-${ARCH} .
            podman build --platform linux/${ARCH} --format docker --pull=false --file images/${{ inputs.image_name }}/${{ inputs.image_variant }}/Containerfile.webserver --tag pulp/${base_image}-web:ci-${ARCH} --build-arg FROM_TAG=ci-${ARCH} .
          else
            podman build --platform linux/${ARCH} --format docker --pull=false --file images/${{ inputs.image_name }}/${{ inputs.image_variant }}/Containerfile --tag pulp/${{ inputs.image_name }}:ci-${ARCH} --build-arg FROM_TAG=ci-${ARCH} ${{ env.BUILD_UI_ARG }} .
          fi
        done
        podman images -a
      shell: bash

    - name: Set version and branch image tags
      id: image_version_branch
      run: |
        base_image=$(echo ${{ inputs.image_name }} | cut -d '-' -f1)
        podman run --pull=never pulp/${{ inputs.image_name }}:ci-amd64 bash -c "pip3 freeze | grep pulp" >> versions.freeze
        app_version=$(grep pulpcore versions.freeze | sed -n -e 's/pulpcore==//p')
        app_branch=$(echo ${app_version} | grep -oP '\d+\.\d+')

        echo "APP_VERSION: ${app_version}"
        echo "APP_BRANCH: ${app_branch}"
        echo "app_version=${app_version}" >> "$GITHUB_OUTPUT"
        echo "app_branch=${app_branch}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Clear cache for next upload
      if: env.BUILD == 'true' && steps.cache.outputs.cache-hit == 'true' && github.event_name != 'pull_request'
      run: |
        echo "Deleting existing cache for ${{ env.VERSIONKEY }}"
        gh cache delete ${{ env.VERSIONKEY }} -R ${{ github.repository }}
      shell: bash

    - name: Cache versions
      if: env.BUILD == 'true' && github.event_name != 'pull_request'
      uses: actions/cache/save@v4
      with:
        key: ${{ env.VERSIONKEY }}
        path: versions.freeze
